image: misterio92/ci-php-node

stages:
  - build
  - test
  - deploy

# Cache modules in between jobs
# cache:
#   key: ${CI_COMMIT_REF_SLUG}
#   paths:
#   - node_modules
#   - vendor

build:linux:
  stage: build
  before_script:
    - composer install
    - npm install
    - npm run postinstall
  script:
    - npx encore dev
  artifacts:
    paths:
      - public
      - node_modules
      - vendor

test:linux:
  stage: test
  script:
    - npm run testFixAndCoverage
  dependencies:
    - build:linux

code_quality:
  stage: build
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env SOURCE_CODE="$PWD"
        --volume "$PWD":/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
  artifacts:
    paths: [gl-code-quality-report.json]
  only:
    - master


### This should be cool but it currently does not work for us ? why ..
# license_management:
#   image: docker:stable
#   stage: build
#   variables:
#     DOCKER_DRIVER: overlay2
#   allow_failure: true
#   services:
#     - docker:stable-dind
#   script:
#     - ls -alh
#     - ls -alh node_modules
#     - export LICENSE_MANAGEMENT_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
#     - docker run
#         --volume "$PWD:/code"
#         "registry.gitlab.com/gitlab-org/security-products/license-management:$LICENSE_MANAGEMENT_VERSION" analyze /code
#   artifacts:
#     paths: [gl-license-management-report.json]

sast:
  stage: test
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env SAST_CONFIDENCE_LEVEL="${SAST_CONFIDENCE_LEVEL:-3}"
        --volume "$PWD:/code"
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/sast:$SP_VERSION" /app/bin/run /code
  artifacts:
    paths: [gl-sast-report.json]
  only:
    - master

dependency_scanning:
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env DEP_SCAN_DISABLE_REMOTE_CHECKS="${DEP_SCAN_DISABLE_REMOTE_CHECKS:-false}"
        --volume "$PWD:/code"
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/dependency-scanning:$SP_VERSION" /code
  artifacts:
    paths: [gl-dependency-scanning-report.json]

pages:
  stage: deploy
  script:
    - npm run generateDoc
    - echo 'Deploying the doc...'
  dependencies:
    - build:linux
  artifacts:
    paths:
    - public
  only:
  - master

test_deploy:
  environment:
    name: test
    url: http://v2.test.covivo.eu
  artifacts:
    paths:
      - build/
  only:
    - dev
  before_script:
   - apt-get update -y && apt-get install sshpass
  script:
    - sshpass -p "${V2_TEST_PASS}" rsync --progress -avz -e ssh -o StrictHostKeyChecking=no ./  ${DEPLOYMENT_TEST_SERVER_USER}@${DEPLOYMENT_TEST_SERVER_IP}:~/


deploy_prod:
  stage: deploy
  script:
    - sshpass -p "${V2_PROD_PASS}" rsync --progress -avz -e ssh -o StrictHostKeyChecking=no ./  ${DEPLOYMENT_PROD_SERVER_USER}@${DEPLOYMENT_PROD_SERVER_IP}:~/
  environment:
    name: prod
    url: http://v2.prod.covivo.eu
  when: manual
  only:
  - master