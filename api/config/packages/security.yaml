security:

    encoders:
        Symfony\Component\Security\Core\User\User: 
            algorithm: auto
        App\App\Entity\App:
            algorithm: auto
        App\User\Entity\User:
            algorithm: auto

    # providers for authentication
    providers:
        # chain provider will try the other providers in sequence
        # useful as many authentications systems exist : by app (frontend), by users (with mobile app), with a token...
        chain_provider:
            chain:
                # providers: [servers, users]
                providers: [jwt, servers, users]
        # provider for apps authentication (eg. frontend)
        servers: 
            entity:
                class: 'App\App\Entity\App'
                property: 'username'
        # provider for users authentication (eg. mobile apps, admin)
        users: 
            entity:
                class: 'App\User\Entity\User'
                property: 'email'
        # provider for logged users or app (eg. with a valid token)
        # /!\ this is the database-less provider, it avoids loading the user for each api call, so if you need the user information don't use this provider ! /!\
        jwt:
            lexik_jwt: ~

    # firewalls
    firewalls:

        # firewall for server to server authentication
        login_server:
            pattern:  ^/auth
            stateless: true
            anonymous: true
            provider: servers
            json_login:
                check_path: /auth
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        
        # firewall for user to server authentication
        login_user:
            pattern:  ^/login
            stateless: true
            anonymous: true
            provider: users
            json_login:
                check_path: /login
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        # firewall for documentation
        doc:
            pattern:  ^/doc
            stateless: true
            anonymous: true

        # firewall for R&D
        rd:
            pattern:  ^/rd/
            stateless: true
            anonymous: true

        # firewall for geosearch
        geosearch:
            pattern:  ^/addresses/search
            stateless: true
            anonymous: true

        # firewall for reverse geocoding
        reverse:
            pattern:  ^/addresses/reverse
            stateless: true
            anonymous: true    

        # firewall for dev (profiler)
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        
        # firewall for any other route
        main:
            pattern:   ^/
            provider: chain_provider
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/doc, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/docs.json, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/rd/, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/addresses/search, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/addresses/reverse, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/, roles: IS_AUTHENTICATED_FULLY }