# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'fr'

imports:
    - { resource: images.yaml }
    - { resource: mass.yaml }

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # cache
    app.simple_cache:
        class: Symfony\Component\Cache\Simple\Psr6Cache
        arguments: ['@app.cache.mobicoop']

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # JWT Event Listener
    mobicoop.event.jwt_created_listener:
        class: App\Security\EventListener\JWTCreatedListener
        arguments: [ '@request_stack' ]
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }

    # Direction Load Listener
    mobicoop.direction.direction_load_listener:
        class: App\Geography\EventListener\DirectionLoadListener
        arguments: ['@App\Geography\Service\GeoTools'] # GeoTools injected to compute CO2
        tags:
            - { name: doctrine.event_listener, event: postLoad }

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Article\Controller\:
        resource: '../src/Article/Controller'
        tags: ['controller.service_arguments']

    App\Carpool\Controller\:
        resource: '../src/Carpool/Controller'
        tags: ['controller.service_arguments']

    'App\Carpool\Filter\LocalityFilter':
        # Uncomment only if autoconfiguration isn't enabled
        #tags: [ 'api_platform.filter' ]

    App\Rdex\Controller\:
        resource: '../src/Rdex/Controller'
        tags: ['controller.service_arguments']
        
    App\Geography\Controller\:
        resource: '../src/Geography/Controller'
        tags: ['controller.service_arguments']
        
    App\Image\Controller\:
        resource: '../src/Image/Controller'
        tags: ['controller.service_arguments']

    App\Match\Controller\:
        resource: '../src/Match/Controller'
        tags: ['controller.service_arguments']

    # alias to allow this type to be autowired
    Geocoder\Plugin\PluginProvider: '@bazinga_geocoder.provider.chain'
    
    # inject image parameters to ImageManager 
    App\Image\Service\ImageManager:
        arguments:
            $types: '%images%'
            
    App\Image\EntityListener\ImageListener:
        arguments: ['@App\Image\Service\ImageManager']
        tags:
            - { name: doctrine.orm.entity_listener, lazy: true }    # lazy set to true to avoid doctrine UnitOfWork error on insert

    # inject SIG uri to GeoRouter service
    App\Geography\Service\GeoRouter:
        arguments:
            $uri: '%env(resolve:SIG_GEOROUTER_URI)%'

    # set the monolog channel to use for ProposalManager
    App\Carpool\Service\ProposalManager:
        tags:   
            - { name: monolog.logger, channel: carpool }

    # inject rdex parameters to ExternalJourneyManager 
    App\ExternalJourney\Service\ExternalJourneyManager:
        arguments:
            $operator: '%env(json:file:resolve:RDEX_OPERATOR)%'
            $clients: '%env(json:file:resolve:RDEX_CLIENTS)%'
            $providers: '%env(json:file:resolve:RDEX_PROVIDERS)%'
    
    # inject mass parameters to MassImportManager 
    # set the monolog channel to use for MassImportManager
    App\Match\Service\MassImportManager:
        arguments:
            $params: '%mass%'
        tags:   
            - { name: monolog.logger, channel: mass }

    # inject parameters to GeoSearcher
    App\Geography\Service\GeoSearcher:
        arguments:
            $params:
                - { displayCountry: '%env(resolve:DISPLAY_COUNTRY)%', displayRegion: '%env(resolve:DISPLAY_REGION)%', displaySeparator: '%env(resolve:DISPLAY_SEPARATOR)%' }

    # set the monolog channel to use for UserManager
    App\Match\Service\GeoMatcher:
        tags: 
            - { name: monolog.logger, channel: geomatcher }    
