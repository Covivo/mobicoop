################
# route naming #
################

# domain_subdomain_action ; underscore accepted only for action, no plural
# exceptions : for common routes like home, login, logout, signup...


##################
# default routes #
##################

home:
    path:
        fr: /
        en: /
    controller: Mobicoop\Bundle\MobicoopBundle\Controller\DefaultController::index

home_logout:
    path:
        fr: /utilisateur/compte-supprimer
        en: /user/account-delete
    controller: Mobicoop\Bundle\MobicoopBundle\Controller\DefaultController::indexLogout


###############
# user routes #
###############

# bank coordinates
user_bank_coordinates:
    methods: [POST]
    path:
        fr: /utilisateur/coordonnees-bancaires
        en: /user/bank-coordinates
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::getBankCoordinates

user_bank_coordinates_add:
    methods: [POST]
    path:
        fr: /utilisateur/coordonnees-bancaires/ajouter
        en: /user/bank-coordinates/add
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::addBankCoordinates

user_bank_coordinates_delete:
    methods: [POST]
    path:
        fr: /utilisateur/coordonnees-bancaires/supprimer
        en: /user/bank-coordinates/delete
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::deleteBankCoordinates

# login
user_login:
    path:
        fr: /utilisateur/connexion
        en: /user/login
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::login

user_login_result:
    path:
        fr: /utilisateur/connexion/{proposalId}
        en: /user/login/{proposalId}
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::login

user_login_token:
    path:
        fr: /utilisateur/login-token
        en: /user/login-token
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::userSignUpValidationCheck

# logout
user_logout:
    path: /user/logout

# sign up
user_sign_up:
    path:
        fr: /utilisateur/inscription
        en: /user/signup
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::userSignUp

user_sign_up_result:
    path:
        fr: /utilisateur/inscription/{proposalId}
        en: /user/signup/{proposalId}
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::userSignUp

user_sign_up_validation:
    path:
        fr: /utilisateur/inscription/validation/{email}/{token}
        en: /user/signup/validation/{email}/{token}
    defaults:
        token: ""
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::userSignUpValidation

# user update address
user_homeAddress_update:
    path:
        fr: /utilisateur/profil/modifier/adresse
        en: /user/profile/update/address
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::UserAddressUpdate

# profile update
user_profile_update:
    path:
        fr: /utilisateur/profil/modifier/{tabDefault?}
        en: /user/profile/update/{tabDefault?}
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::userProfileUpdate

# Delete user by anonymise
user_delete:
    path:
        fr: /utilisateur/profil/supprimer
        en: /user/profil/delete
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::deleteUser

# phone validation
user_phone_validation:
    path:
        fr: /utilisateur/telephone/validation
        en: /user/phone/validation
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::userPhoneValidation

# send code phone validation
user_phone_token:
    path:
        fr: /utilisateur/telephone/token
        en: /user/phone/token
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::generatePhoneToken

# delete avatar
user_profile_image_delete:
    path:
        fr: /utilisateur/profil/avatar/supprimer
        en: /user/profile/avatar/delete
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::userProfileAvatarDelete

# password update
user_password_update:
    path:
        fr: /utilisateur/mot-de-passe/modifier
        en: /user/password/update
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::userPasswordUpdate

user_carpool_settings_update:
    path:
        fr: /utilisateur/preferences-covoiturage/modifier
        en: /user/carpool-settings/update
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::userCarpoolSettingsUpdate

# password forgotten : ask for a new password
user_password_forgot:
    path:
        fr: /utilisateur/mot-de-passe/recuperation
        en: /user/password/recovery
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::userPasswordRecovery

user_password_for_recovery:
    path:
        fr: /utilisateur/mot-de-passe/recuperation/envoi
        en: /user/password/recovery/send
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::userPasswordForRecovery

user_update_password_reset:
    path:
        fr: /utilisateur/mot-de-passe/reset/update/{token}
        en: /user/password/reset/update/{token}
    requirements:
        token: .*
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::userUpdatePasswordReset

# password forgotten : reset the password
user_password_reset:
    path:
        fr: /utilisateur/mot-de-passe/reset/{token}
        en: /user/password/reset/{token}
    requirements:
        token: .*
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::userPasswordReset

user_update_alert:
    methods: [POST]
    path:
        fr: /utilisateur/alerte/changement
        en: /user/alert/update
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::updateAlert

# messages
user_message_list:
    path:
        fr: /utilisateur/messages
        en: /user/messages
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::mailBox

user_message_list_new_thread_direct:
    methods: [POST]
    path:
        fr: /utilisateur/messages/nouveau
        en: /user/messages/new
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::mailBox

user_message_direct_threads_list:
    path:
        fr: /utilisateur/messages/direct
        en: /user/messages/direct
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::userMessageDirectThreadsList

user_message_carpool_threads_list:
    path:
        fr: /utilisateur/messages/covoiturage
        en: /user/messages/carpool
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::userMessageCarpoolThreadsList

user_message_solidary_threads_list:
    path:
        fr: /utilisateur/messages/solidaires
        en: /user/messages/solidary
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::userMessageSolidaryThreadsList

user_message_complete_thread:
    path:
        fr: /utilisateur/messages/{idMessage}/fil
        en: /user/messages/{idMessage}/thread
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::userMessageThread

user_message_actions_infos:
    methods: [POST]
    path:
        fr: /utilisateur/messages/actions/infos
        en: /user/messages/actions/infos
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::userMessagesActionsInfos

# send an internal message
user_message_send:
    path:
        fr: /utilisateur/messages/envoyer
        en: /user/messages/send
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::userMessageSend

# get a message thread
user_message_thread:
    path:
        fr: /utilisateur/messages/{idFirstMessage}
        en: /user/messages/{idFirstMessage}
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::userMessageThread
    requirements:
        idFirstMessage: '\d+'

# update an Ask from messages
user_message_update_ask:
    methods: [POST]
    path:
        fr: /utilisateur/messages/updateAsk
        en: /user/messages/updateAsk
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::userMessageUpdateAsk

# Connection by facebook (POST)
user_facebook_connect:
    methods: [POST]
    path:
        fr: /utilisateur/facebook/connexion
        en: /user/facebook/connect
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::userFacebookConnect

# Connection by facebook (POST)
user_communities:
    methods: [POST]
    path:
        fr: /utilisateur/communautes
        en: /user/communities
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::userCommunities

# Check if email is already taken (POST)
user_check_email_exists:
    methods: [POST]
    path:
        fr: /utilisateur/verif/email
        en: /user/check/email
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::userCheckEmailExists

# Unsubscribe user from email
user_unsubscribe_email:
    path:
      fr: /utilisateur/unsubscribe/{token}
      en: /user/unsubscribe/{token}
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::userUnsubscribeFromEmail

# Get communities owned by a user (POST)
user_communities_owned:
    methods: [POST]
    path:
        fr: /user/communities/owned
        en: /user/communities/owned
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::userOwnedCommunities

# Get events created by a user (POST)
user_created_events:
    methods: [POST]
    path:
        fr: /user/events/created
        en: /user/events/created
    controller: Mobicoop\Bundle\MobicoopBundle\User\Controller\UserController::userCreatedEvents


##################
# carpool routes #
##################

# post & edit
#############

# post an ad
carpool_ad_post:
    path:
        fr: /covoiturage/annonce/poster
        en: /carpool/ad/post/
    controller: Mobicoop\Bundle\MobicoopBundle\Carpool\Controller\CarpoolController::carpoolAdPost

# update an ad
carpool_ad_update:
    path:
        fr: /covoiturage/annonce/{id}/modifier
        en: /carpool/ad/{id}/update/
    controller: Mobicoop\Bundle\MobicoopBundle\Carpool\Controller\CarpoolController::carpoolAdUpdate

# delete an ad (AJAX)
carpool_ad_delete:
    path:
        fr: /covoiturage/annonce/supprimer
        en: /carpool/ad/delete
    controller: Mobicoop\Bundle\MobicoopBundle\Carpool\Controller\CarpoolController::carpoolAdDelete

# post a first ad
carpool_first_ad_post:
    path:
        fr: /covoiturage/annonce/poster/premiere
        en: /carpool/ad/post/first
    controller: Mobicoop\Bundle\MobicoopBundle\Carpool\Controller\CarpoolController::carpoolFirstAdPost

# post a solidary exclusive ad
carpool_solidary_exclusive_ad_post:
    path:
        fr: /covoiturage/annonce/poster/solidaire
        en: /carpool/ad/post/solidary
    controller: Mobicoop\Bundle\MobicoopBundle\Carpool\Controller\CarpoolController::carpoolSolidaryExclusiveAdPost

# post an ad from a search
carpool_ad_post_search:
    path:
        fr: /covoiturage/recherche/poster
        en: /carpool/search/post
    controller: Mobicoop\Bundle\MobicoopBundle\Carpool\Controller\CarpoolController::carpoolAdPostFromSearch

# results
#########

# ad results list (full page)
carpool_ad_results:
    path:
        fr: /covoiturage/annonce/{id}/resultats
        en: /carpool/ad/{id}/results
    controller: Mobicoop\Bundle\MobicoopBundle\Carpool\Controller\CarpoolController::carpoolAdResults
    requirements:
        id: '\d+'

# ad results list after authentication (login or register) (full page)
carpool_ad_results_after_authentication:
    path:
        fr: /covoiturage/annonce/{id}/covoiturer
        en: /carpool/ad/{id}/carpool
    controller: Mobicoop\Bundle\MobicoopBundle\Carpool\Controller\CarpoolController::carpoolAdResultsAfterAuthentication
    requirements:
        id: '\d+'

# ad result detail : results of a specific proposal (AJAX json)
carpool_ad_detail:
    methods: [GET]
    path:
        fr: /covoiturage/annonce/{id}/detail
        en: /carpool/ad/{id}/detail
    controller: Mobicoop\Bundle\MobicoopBundle\Carpool\Controller\CarpoolController::carpoolAdDetail
    requirements:
        id: '\d+'

# ad result detail (with filters : POST) (AJAX json)
carpool_ad_detail_filtered:
    methods: [POST]
    path:
        fr: /covoiturage/annonce/{id}/detail
        en: /carpool/ad/{id}/detail
    controller: Mobicoop\Bundle\MobicoopBundle\Carpool\Controller\CarpoolController::carpoolAdDetail
    requirements:
        id: '\d+'

# ad result detail from an external link : results of a specific proposal (AJAX json)
carpool_ad_detail_external:
    methods: [GET]
    path:
        fr: /covoiturage/annonce/{id}/externe
        en: /carpool/ad/{id}/external
    controller: Mobicoop\Bundle\MobicoopBundle\Carpool\Controller\CarpoolController::carpoolAdDetailExternal

# ad result detail from an external link (with filters : POST) (AJAX json)
carpool_ad_detail_external_filtered:
    methods: [POST]
    path:
        fr: /covoiturage/annonce/{id}/externe
        en: /carpool/ad/{id}/external
    controller: Mobicoop\Bundle\MobicoopBundle\Carpool\Controller\CarpoolController::carpoolAdDetailExternal

# search results (POST) (full page)
carpool_search_result:
    methods: [POST]
    path:
        fr: /covoiturage/recherche
        en: /carpool/search
    controller: Mobicoop\Bundle\MobicoopBundle\Carpool\Controller\CarpoolController::carpoolSearchResult

# search results (GET) (full page)
carpool_search_result_get:
    methods: [GET]
    path:
        fr: /covoiturage/recherche
        en: /carpool/search
    controller: Mobicoop\Bundle\MobicoopBundle\Carpool\Controller\CarpoolController::carpoolSearchResultGet

# search results (GET RDEX) (full page)
carpool_search_result_rdex:
    methods: [GET]
    path:
        fr: /covoiturage/rdex/{externalId}
        en: /carpool/rdex/{externalId}
    controller: Mobicoop\Bundle\MobicoopBundle\Carpool\Controller\CarpoolController::carpoolSearchResultFromRdexLink

# search results for a community proposal (GET) (full page)
carpool_search_result_community:
    methods: [GET]
    path:
        fr: /covoiturage/communaute/{communityName}/{proposalId}
        en: /carpool/community/{communityName}/{proposalId}
    controller: Mobicoop\Bundle\MobicoopBundle\Carpool\Controller\CarpoolController::carpoolSearchResultFromCommunityProposal

# search results for city to city (GET) (full page)
carpool_search_result_city_to_city:
    methods: [GET]
    path:
        fr: /covoiturage/{originLocality}/{destinationLocality}/{proposalId}
        en: /carpool/{originLocality}/{destinationLocality}/{proposalId}
    controller: Mobicoop\Bundle\MobicoopBundle\Carpool\Controller\CarpoolController::carpoolSearchResultForCityToCity

# search matching (POST) (AJAX json)
carpool_search_matching:
    methods: [POST]
    path:
        fr: /covoiturage/recherche/matching
        en: /carpool/search/matching
    controller: Mobicoop\Bundle\MobicoopBundle\Carpool\Controller\CarpoolController::carpoolSearchMatching

# contact
#########

# carpool contact (POST) (AJAX json)
carpool_contact:
    methods: [POST]
    path:
        fr: /covoiturage/contact
        en: /carpool/contact
    controller: Mobicoop\Bundle\MobicoopBundle\Carpool\Controller\CarpoolController::carpoolContact

# carpool ask from results (POST) (AJAX json)
carpool_result_ask:
    methods: [POST]
    path:
        fr: /covoiturage/demande
        en: /carpool/ask
    controller: Mobicoop\Bundle\MobicoopBundle\Carpool\Controller\CarpoolController::carpoolAsk

# rdex
#########

# rdex provider (AJAX json)
rdex_provider:
    path:
        fr: /provider/rdex/
        en: /provider/rdex/
    controller: Mobicoop\Bundle\MobicoopBundle\Carpool\Controller\CarpoolController::rdexProvider

# rdex journey (POST) (AJAX json)
rdex_journey:
    methods: [POST]
    path:
        fr: /covoiturage/rdexJourney
        en: /carpool/rdexJourney
    controller: Mobicoop\Bundle\MobicoopBundle\Carpool\Controller\CarpoolController::rdexJourney

# public transport journey (AJAX)
public_transport_journey:
    methods: [POST]
    path:
        fr: /transport-public/recherche
        en: /public-transport/search
    controller: Mobicoop\Bundle\MobicoopBundle\Carpool\Controller\CarpoolController::PTSearch

####################
# community routes #
####################

# create community
community_create:
    path:
        fr: /communaute/creer
        en: /community/create
    controller: Mobicoop\Bundle\MobicoopBundle\Community\Controller\CommunityController::communityCreate

# display communities
community_list:
    path:
        fr: /communautes
        en: /community
    controller: Mobicoop\Bundle\MobicoopBundle\Community\Controller\CommunityController::communityList

# Get the communities (AJAX)
community_get_list:
    methods: [POST]
    path:
        fr: /communaute/liste-des-communautes
        en: /community/getCommunityList
    controller: Mobicoop\Bundle\MobicoopBundle\Community\Controller\CommunityController::getCommunityList

# display one community
community_show:
    path:
        fr: /communaute/{id}
        en: /community/{id}
    controller: Mobicoop\Bundle\MobicoopBundle\Community\Controller\CommunityController::communityShow
    requirements:
        id: '\d+'

# display the register form for a secured community
community_secured_register:
    path:
        fr: /communaute/{id}/securisee/inscription
        en: /community/{id}/secured/register
    controller: Mobicoop\Bundle\MobicoopBundle\Community\Controller\CommunityController::communitySecuredRegister
    requirements:
        id: '\d+'

# join a community (AJAX)
community_join:
    path:
        fr: /communaute/{id}/rejoindre
        en: /community/{id}/join
    controller: Mobicoop\Bundle\MobicoopBundle\Community\Controller\CommunityController::communityJoin
    requirements:
        id: '\d+'

# leave a community (AJAX)
community_leave:
    path:
        fr: /communaute/{id}/quitter
        en: /community/{id}/leave
    controller: Mobicoop\Bundle\MobicoopBundle\Community\Controller\CommunityController::communityLeave
    requirements:
        id: '\d+'

# get a community user (AJAX)
community_user:
    methods: [POST]
    path:
        fr: /community-user
        en: /community-user
    controller: Mobicoop\Bundle\MobicoopBundle\Community\Controller\CommunityController::communityUser
    requirements:
        id: '\d+'


# get community members list (AJAX)
community_member_list:
    methods: [POST]
    path:
        fr: /community/memberList
        en: /community/memberList
    controller: Mobicoop\Bundle\MobicoopBundle\Community\Controller\CommunityController::communityMemberList
    requirements:
        id: '\d+'

# get all community proposals (AJAX)
community_proposals:
    path:
        fr: /community-proposals/{id}
        en: /community-proposals/{id}
    controller: Mobicoop\Bundle\MobicoopBundle\Community\Controller\CommunityController::communityProposals
    requirements:
        id: '\d+'

# get all available communities for the logged user (AJAX)
community_user_available:
    path:
        fr: /communautes/utilisateur/{userId}
        en: /communities/user/{userId}
    controller: Mobicoop\Bundle\MobicoopBundle\Community\Controller\CommunityController::communityUserAvailable
    requirements:
        userId: '\d+'

# display widget
community_widget:
    path:
        fr: /communaute/widget/{id}
        en: /community/widget/{id}
    controller: Mobicoop\Bundle\MobicoopBundle\Community\Controller\CommunityController::communityWidget
    requirements:
        id: '\d+'

# get widget
community_get_widget:
    path:
        fr: /communaute/widget/get/{id}
        en: /community/widget/get/{id}
    controller: Mobicoop\Bundle\MobicoopBundle\Community\Controller\CommunityController::communityGetWidget
    requirements:
        id: '\d+'        

##########################
# editorial pages routes #
##########################

# get an article
article_get:
    path:
        fr: /article/{id}
        en: /article/{id}
    controller: Mobicoop\Bundle\MobicoopBundle\Article\Controller\ArticleController::articleGet
    requirements:
        id: '\d+'

# get an article (AJAX)
article:
    path:
        fr: /article
        en: /article
    controller: Mobicoop\Bundle\MobicoopBundle\Article\Controller\ArticleController::article

# display project page
project:
    path:
        fr: /projet
        en: /project
    controller: Mobicoop\Bundle\MobicoopBundle\Article\Controller\ArticleController::showProject

# display CGU page
cgu:
    path:
        fr: /cgu
        en: /cgu
    controller: Mobicoop\Bundle\MobicoopBundle\Article\Controller\ArticleController::showCgu

# display news page
news:
    path:
        fr: /nouveautes
        en: /news
    controller: Mobicoop\Bundle\MobicoopBundle\Article\Controller\ArticleController::showNews

# display data policy page
data_policy:
    path:
        fr: /protection-donnees
        en: /data-policy
    controller: Mobicoop\Bundle\MobicoopBundle\Article\Controller\ArticleController::showDataPolicy

# display insurance policy page
insurance_policy:
    path:
        fr: /assurance
        en: /insurance
    controller: Mobicoop\Bundle\MobicoopBundle\Article\Controller\ArticleController::showInsurancePolicy

# display history page
history:
    path:
        fr: /historique
        en: /history
    controller: Mobicoop\Bundle\MobicoopBundle\Article\Controller\ArticleController::showHistory

# display actors page
actors:
    path:
        fr: /les-acteurs
        en: /actors
    controller: Mobicoop\Bundle\MobicoopBundle\Article\Controller\ArticleController::showActors

# display solidary carpool page
solidary_carpool:
    path:
        fr: /covoiturage-solidaire
        en: /solidary-carpool
    controller: Mobicoop\Bundle\MobicoopBundle\Article\Controller\ArticleController::showSolidaryCarpool

# display become a partner page
become_partner:
    path:
        fr: /devenir-partenaire
        en: /become-partner
    controller: Mobicoop\Bundle\MobicoopBundle\Article\Controller\ArticleController::showBecomePartner

# display FAQ page
FAQ:
    path:
        fr: /FAQ
        en: /FAQ
    controller: Mobicoop\Bundle\MobicoopBundle\Article\Controller\ArticleController::showFAQ

# display cookie page
cookies:
    path:
        fr: /cookies
        en: /cookies
    controller: Mobicoop\Bundle\MobicoopBundle\Article\Controller\ArticleController::showCookie    

# display ToolBox page
ToolBox:
    path:
        fr: /boite-a-outils
        en: /toolBox
    controller: Mobicoop\Bundle\MobicoopBundle\Article\Controller\ArticleController::showToolbox

# display CommunityInfos page
CommunityInfos:
    path:
        fr: /informations-communautes
        en: /community-infos
    controller: Mobicoop\Bundle\MobicoopBundle\Article\Controller\ArticleController::showCommunityInfos

# display LOM page
LOM:
    path:
        fr: /LOM
        en: /LOM
    controller: Mobicoop\Bundle\MobicoopBundle\Article\Controller\ArticleController::showLOM

# display GoodPractices page
GoodPractices:
    path:
        fr: /bonnes-pratiques
        en: /good-practices
    controller: Mobicoop\Bundle\MobicoopBundle\Article\Controller\ArticleController::showGoodPractices

# display MoreAbout page
MoreAbout:
    path:
        fr: /en-savoir-plus
        en: /more-about
    controller: Mobicoop\Bundle\MobicoopBundle\Article\Controller\ArticleController::showMoreAbout

# display COVID-19 page
Covid19:
    path:
        fr: /covid-19
        en: /covid-19
    controller: Mobicoop\Bundle\MobicoopBundle\Article\Controller\ArticleController::showCovid19
    


# Get the last external articles (AJAX)
LastExternalArticles:
    methods: [POST]
    path:
        fr: /articles/derniers/externes
        en: /articles/last/extern
    controller: Mobicoop\Bundle\MobicoopBundle\Article\Controller\ArticleController::lastExternalArticles





####################
# geography routes #
####################

# georouter route
georouter:
    path:
        fr: /georoute
        en: /georoute
    controller: Mobicoop\Bundle\MobicoopBundle\Geography\Controller\GeoRouterController::geoRoute


####################
# contact routes #
####################

# display contact page
contact:
    path:
        fr: /contact
        en: /contact
    controller: Mobicoop\Bundle\MobicoopBundle\Communication\Controller\ContactController:showContact

contact_send:
    path:
        fr: /contact/send
        en: /contact/send
    controller: Mobicoop\Bundle\MobicoopBundle\Communication\Controller\ContactController:sendContact


####################
# solidarity routes #
####################

# display solidarity ask page
solidary:
    path:
        fr: /solidarite
        en: /solidary
    controller: Mobicoop\Bundle\MobicoopBundle\Solidary\Controller\SolidaryController:index

solidary_ask:
    path:
        fr: /solidarite/demande
        en: /solidary/ask
    controller: Mobicoop\Bundle\MobicoopBundle\Solidary\Controller\SolidaryController:solidaryCreate


################
# event routes #
################

# Get the events (AJAX)
event_get_list:
    methods: [POST]
    path:
        fr: /evenements/getEventList
        en: /events/getEventList
    controller: Mobicoop\Bundle\MobicoopBundle\Event\Controller\EventController::getEventList

# display events
event_list:
    path:
        fr: /evenements/{tabDefault?}
        en: /events/{tabDefault?}
    controller: Mobicoop\Bundle\MobicoopBundle\Event\Controller\EventController::eventList    

# create event
event_create:
    path:
        fr: /evenement/creer
        en: /event/create
    controller: Mobicoop\Bundle\MobicoopBundle\Event\Controller\EventController::eventCreate

# display one event
event_show:
    path:
        fr: /evenement/{id}
        en: /event/{id}
    controller: Mobicoop\Bundle\MobicoopBundle\Event\Controller\EventController::eventShow
    requirements:
        id: '\d+'

# display widget
event_widget:
    path:
        fr: /evenement/widget/{id}
        en: /event/widget/{id}
    controller: Mobicoop\Bundle\MobicoopBundle\Event\Controller\EventController::eventWidget
    requirements:
        id: '\d+'

# get widget
event_get_widget:
    path:
        fr: /evenement/widget/get/{id}
        en: /event/widget/get/{id}
    controller: Mobicoop\Bundle\MobicoopBundle\Event\Controller\EventController::eventGetWidget
    requirements:
        id: '\d+'

# report event
event_report:
    path:
        fr: /evenement/{id}/signaler
        en: /event/{id}/report
    controller: Mobicoop\Bundle\MobicoopBundle\Event\Controller\EventController::eventReport
    requirements:
        id: '\d+'


######################
# relay point routes #
######################

# Get the relay points (AJAX)
relay_point_get_list:
    methods: [POST]
    path:
        fr: /points-relais/getRelayPointList
        en: /relay-points/getRelayPointList
    controller: Mobicoop\Bundle\MobicoopBundle\RelayPoint\Controller\RelayPointController::getRelayPointList

# display relay points
relay_point_list:
    path:
        fr: /points-relais
        en: /relay-points
    controller: Mobicoop\Bundle\MobicoopBundle\RelayPoint\Controller\RelayPointController::relayPointList    

###############
# payment routes #
###############    

# Get payment items of a user (POST)
payment_items_list:
    methods: [POST]
    path:
        fr: /payments/get
        en: /payments/get
    controller: Mobicoop\Bundle\MobicoopBundle\Payment\Controller\PaymentController::getPaymentItems

# Get payment items of a user (POST)
payment_payments_post:
    methods: [POST]
    path:
        fr: /payments/post
        en: /payments/post
    controller: Mobicoop\Bundle\MobicoopBundle\Payment\Controller\PaymentController::postPayments

# payment 
payment_list:
    path:
        fr: /paiements/{id?}/{frequency?}/{type?}
        en: /payments/{id?}/{frequency?}/{type?}
    controller: Mobicoop\Bundle\MobicoopBundle\Payment\Controller\PaymentController::payment  

# Get weeks to pay (POST)
payment_weeks_list:
    methods: [POST]
    path:
        fr: /getWeeks
        en: /getWeeks
    controller: Mobicoop\Bundle\MobicoopBundle\Payment\Controller\PaymentController::getWeeks        

###############
# misc routes #
###############

# round price
round_price:
    path:
        fr: /prix/arrondir
        en: /price/round
    controller: Mobicoop\Bundle\MobicoopBundle\Price\Controller\PriceController::roundPrice

# Get the platform widget
get_platform_widget:
    path:
        fr: /widget/get
        en: /widget/get
    controller: Mobicoop\Bundle\MobicoopBundle\Controller\DefaultController::getPlatformWidget

# The platform widget
platform_widget:
    path:
        fr: /widget
        en: /widget
    controller: Mobicoop\Bundle\MobicoopBundle\Controller\DefaultController::platformWidget

# Default page when no longer exists
page_no_longer_exists:
    path:
        fr: /page-no-longer-exists
        en: /page-no-longer-exists
    controller: Mobicoop\Bundle\MobicoopBundle\Controller\DefaultController::getPageNoLongerExists
